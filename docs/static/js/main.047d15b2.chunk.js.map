{"version":3,"sources":["components/addCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","giftExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","nuevaCategoria","setnuevaCategoria","onSubmit","e","preventDefault","cats","htmlFor","id","type","name","value","onChange","target","handleAddCategory","required","GetGifs","category","a","url","fetch","resp","json","data","gif","map","img","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","setImage","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","color","height","width","timeout","svgClass","image","GiftExpertApp","params","Categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"iLAEaA,EAAc,SAAC,GAC3B,IAD4BC,EAC7B,EAD6BA,cAGzB,EAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAeA,OACI,uBAAMC,SAXa,SAACC,GAEpBA,EAAEC,iBACqB,KAAnBJ,GAEAF,GAAe,SAAAO,GAAI,OACdL,GADc,mBACKK,QAK5B,UACI,uBAAOC,QAAQ,mBAAmBC,GAAG,cAArC,6BACA,uBACAC,KAAK,OACLC,KAAK,mBACLC,MAAOV,EACPW,SAAU,SAAAR,IArBQ,SAACA,GAEvBF,EAAkBE,EAAES,OAAOF,OAmBPG,CAAkBV,IAClCI,GAAG,gBACHO,UAAQ,Q,gCCZLC,EAfF,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAENC,EAFM,0FAEmFF,GAFnF,SAGOG,MAAOD,GAHd,cAGNE,EAHM,gBAIWA,EAAKC,OAJhB,uBAIJC,EAJI,EAIJA,KACFC,EAAMD,EAAKE,KAAI,SAAAC,GACjB,MAAM,CACFlB,GAAIkB,EAAIlB,GACRmB,MAAOD,EAAIC,MACXR,IAAKO,EAAIE,OAAOC,iBAAiBV,QAT7B,kBAYLK,GAZK,4CAAH,sD,WCCE,SAASM,EAAT,GAA0C,IAAnBH,EAAkB,EAAlBA,MAAOnB,EAAW,EAAXA,GAAIW,EAAO,EAAPA,IAC7C,OACI,qBAAKY,UAAU,wCAAf,SACI,qBAAIA,UAAU,WAAd,UACI,6BAAKJ,IACL,uBACA,sCAASnB,KACT,qBAAKwB,IAAKb,EAAKc,IAAI,mB,2BCHtBC,EAAU,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SACtB,ECJW,SAAuBA,EAAUkB,GAC5C,MAA0BnC,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAdAC,qBAAU,WACNvB,EAAQC,GACHuB,MAAK,SAAAC,GAEEC,YAAW,WACPJ,EACI,CACIf,KAAMkB,EACNL,SAAQ,MAGjB,UAEhB,CAACnB,IACGoB,EDfiBM,CAAa1B,GAA9BM,EAAP,EAAOA,KAAMa,EAAb,EAAaA,QACb,OACI,qCACI,uBACA,uBACA,oBAAI5B,GAAG,gBAAP,SAAyBS,IACxBmB,EAAU,cAAC,IAAD,CAAQL,UAAU,SAAStB,KAAK,YAAYmC,MAAM,UAAUC,OAAQ,IAAKC,MAAO,IAAKC,QAAS,IAAMC,SAAS,oBAAsB,KAC9I,oBAAIjB,UAAU,oBAAd,SAEQR,EAAKE,KAAI,SAACwB,GAAD,OACL,cAACnB,EAAD,eAGImB,GAFCA,EAAMzC,aEhBtB0C,EAAgB,SAAAC,GACzB,MAAoCnD,mBAAS,IAA7C,mBAAOoD,EAAP,KAAmBrD,EAAnB,KAEA,OACI,sBAAKgC,UAAU,kBAAf,UACI,oBAAIvB,GAAG,eAAP,2BACA,uBACA,oBAAIA,GAAG,kBAAP,wBACA,cAAC,EAAD,CAAaT,cAAeA,IAC5B,6BAIQqD,EAAW3B,KAAI,SAACR,GAAD,OACX,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,YCLxBoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.047d15b2.chunk.js","sourcesContent":["import {React, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ({setCategories}) => \r\n{\r\n\r\n    const [nuevaCategoria, setnuevaCategoria] = useState('')\r\n    const handleAddCategory = (e) =>\r\n    {\r\n        setnuevaCategoria(e.target.value)\r\n    }\r\n    const handleOnSubmit = (e) =>\r\n    {\r\n        e.preventDefault();\r\n        if (nuevaCategoria !== \"\")\r\n        {\r\n            setCategories( cats => \r\n                [nuevaCategoria, ...cats]\r\n            );\r\n        }\r\n    }   \r\n    return(\r\n        <form onSubmit={handleOnSubmit}>\r\n            <label htmlFor=\"agregarCategoria\" id=\"newCategory\">Nueva categoria</label>\r\n            <input\r\n            type=\"text\"\r\n            name=\"agregarCategoria\"\r\n            value={nuevaCategoria}\r\n            onChange={e => {handleAddCategory(e)}}\r\n            id=\"inputCategory\"\r\n            required/>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nconst GetGifs = async(category) =>\r\n{\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=ukzi7JHMHcx7AAjHJffLmBkQN5amm1M7&q=${category}`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    const gif = data.map(img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n    return gif;\r\n}\r\n\r\nexport default GetGifs;","import React from 'react'\r\nimport \"../index.css\"\r\nimport \"animate.css\"\r\nexport default function GifGridItem( {title, id, url} ) {\r\n    return (\r\n        <div className=\"animate__animated animate__rubberBand\">\r\n            <li className=\"itemCard\">\r\n                <h2>{title}</h2>\r\n                <hr></hr>\r\n                <h2>ID: {id}</h2>\r\n                <img src={url} alt=\"gifImagen\"/>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport useFetchGifs from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem'\r\nimport \"../index.css\"\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\nimport Loader from 'react-loader-spinner'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const {data, loading} = useFetchGifs(category);\r\n    return (\r\n        <>\r\n            <br></br>\r\n            <hr></hr>\r\n            <h3 id=\"categoryTitle\">{ category }</h3>\r\n            {loading ? <Loader className=\"loaded\" type=\"ThreeDots\" color=\"#ff0000\" height={300} width={300} timeout={3000} svgClass=\"my-custom-class\"/> : null}\r\n            <ol className=\"itemCardContainer\">\r\n                {\r\n                    data.map((image) => \r\n                        <GifGridItem \r\n                        key={image.id}\r\n                        //De la siguiente manera mandamos cada una de las propiedades de las imagenes de manera independiente\r\n                        {...image} />                         \r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport GetGifs from '../helpers/GetGifs'\r\n\r\n\r\nexport default function useFetchGifs( category, setImage) {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n    useEffect(() => {\r\n        GetGifs(category)\r\n            .then(imgs => \r\n                {\r\n                    setTimeout(() => {\r\n                        setState(\r\n                            {\r\n                                data: imgs,\r\n                                loading:false\r\n                            }\r\n                        )\r\n                    }, 4000);\r\n                })\r\n    }, [category])\r\n    return state;\r\n\r\n\r\n}\r\n","import {React, useState} from 'react';\r\nimport { AddCategory } from './components/addCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\nexport const GiftExpertApp = params => {\r\n    const [Categories, setCategories] = useState([])\r\n\r\n    return(\r\n        <div className=\"containerFather\">\r\n            <h1 id=\"titleProyect\">giftExpertApp</h1>\r\n            <hr/>\r\n            <h2 id=\"subtitleProyect\">Categorias</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <ol>\r\n                {\r\n                    //map recibe 2 parametros, uno es el arreglo y el otro es el indice, en este caso es el que dice i.\r\n                    //Cuando usamos map react pide que si o si se le asigne una key a cada elemento que retorna.\r\n                    Categories.map((category) =>     \r\n                        <GifGrid key={ category } category={ category }/>\r\n                    )\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiftExpertApp } from './giftExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GiftExpertApp/ >,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}